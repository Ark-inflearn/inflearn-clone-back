buildscript {
    ext {
        springBootVersion = '2.5.6'
        springPluginVersion = '1.0.11.RELEASE'
        querydslVersion = '1.0.10'
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springPluginVersion"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$querydslVersion"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.ewerk.gradle.plugins.querydsl'

    group = 'com.ark'
    sourceCompatibility = '11'
    targetCompatibility = '11'

    repositories {
        mavenCentral()
    }

    dependencies {
        annotationProcessor(
                'org.projectlombok:lombok',
                'org.springframework.boot:spring-boot-configuration-processor',
        )

        implementation(
                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.boot:spring-boot-starter-data-jpa',
                'org.springframework.boot:spring-boot-starter-validation',
                'com.querydsl:querydsl-jpa',
                'org.modelmapper:modelmapper:2.4.4',
                'commons-io:commons-io:2.8.0',
                'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1',
                'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3',
                'org.springframework.boot:spring-boot-starter-data-redis',
                'org.springframework.session:spring-session-data-redis',
        )

        testImplementation(
                'org.springframework.boot:spring-boot-starter-test',
        )

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'junit', module: 'junit'
        }

        compileOnly(
                'org.projectlombok:lombok',
        )

        testCompileOnly(
                'org.projectlombok:lombok',
        )

        runtimeOnly(
                'mysql:mysql-connector-java',
                'com.h2database:h2'
        )
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled false
            csv.enabled false
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludeFilter)
            }))
        }
    }

    /* -------------------------------
                 extensions
    ------------------------------- */
    ext {
        querydslDir = "$buildDir/generated/querydsl"
        set('snippetsDir', file('build/generated-snippets'))

        excludeFilter = [
                '**/form/**',
                '**/dto/**',
                '**/*Application.*',
                '**/Q*.class',
                '**/test/**',
        ]
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    bootRun {
        systemProperty 'jasypt.encryptor.password', System.getenv('JASYPT_PASSWORD')
    }

    test {
        useJUnitPlatform()
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        systemProperty 'jasypt.encryptor.password', System.getenv('JASYPT_PASSWORD')
    }

    /* -------------------------------
            sonarqube settings
    ------------------------------- */
    sonarqube {
        properties {
            property "sonar.projectKey", "TEAM-ARK_sprout-backend"
            property "sonar.organization", "team-ark"
            property "sonar.host.url", "https://sonarcloud.io"
        }
    }

    /* -------------------------------
            querydsl settings
    ------------------------------- */
    querydsl {
        jpa = true
        querydslSourcesDir = querydslDir
    }

    sourceSets {
        main.java.srcDir querydslDir
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    /* -------------------------------
            javac settings
    ------------------------------- */
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << '-Xlint:unchecked'
        }
    }

    tasks.withType(JavaCompile) {
        options.fork = true
    }
}

/* -------------------------------
        modules settings
------------------------------- */
project(':module-member') {
    dependencies {
        implementation project(':module-common')
        testImplementation project(':module-common')
    }
}

project(':module-secure') {
    dependencies {
        implementation project(':module-common')
        implementation project(':module-member')
        testImplementation project(':module-common')
        testImplementation project(':module-member')
    }
}

project(':module-community-study') {
    dependencies {
        implementation project(':module-secure')
        implementation project(':module-member')
        implementation project(':module-common')
        testImplementation project(':module-secure')
        testImplementation project(':module-member')
        testImplementation project(':module-common')
    }
}

project(':module-web') {
    dependencies {
        implementation project(':module-secure')
        implementation project(':module-member')
        implementation project(':module-common')
        testImplementation project(':module-secure')
        testImplementation project(':module-member')
        testImplementation project(':module-common')
    }
}
